
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
    <script type="text/javascript" src="d3/d3.js"></script>
    <script type="text/javascript" src="d3/d3.geo.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/azimuthal.css"/>
    <link type="text/css" rel="stylesheet" href="/assets/colorbrewer.css"/>
    <style type="text/css">
        /*size of the svg element*/
        svg {
            width: 768px;
            height: 480px;
            pointer-events: all;
        }

        circle {
            fill: #dbe4f0;
        }

        path {
            fill: #aaa;
            stroke: #fff;
        }

    </style>
</head>
<body>
<div id="body">
    <div class="right-panel">
      <h3>Country</h3>
      <div id="country-content"></div>
    </div>
    <div id="footer">
        <div class="hint">drag to rotate the origin</div>
        <div><select>
            <option value="equalarea">equalarea</option>
            <option value="equidistant">equidistant</option>
            <option value="gnomonic">gnomonic</option>
            <option value="orthographic" selected>orthographic</option>
            <option value="stereographic">stereographic</option>
        </select></div>
    </div>
</div>
<script type="text/javascript">

    var feature;

    var projection = d3.geo.azimuthal()
            .scale(190)  //scales the size of the globe
            .origin([-71.03,42.37])  //starting focus/position of the global
            .mode("orthographic")
            .translate([320,200]);     // translation is position of globe on the svg canvas

    var circle = d3.geo.greatCircle()
            .origin(projection.origin());

    // TODO fix d3.geo.azimuthal to be consistent with scale
    var scale = {
        orthographic: 190,
        stereographic: 190,
        gnomonic: 190,
        equidistant: 190 / Math.PI * 2,
        equalarea: 190 / Math.SQRT2
    };

    var path = d3.geo.path()
            .projection(projection);

    var svg = d3.select("#body").append("svg:svg")
            .attr("width", 1280)
            .attr("height", 800)
            .on("mousedown", mousedown);

    d3.json("/assets/world-countries.json", function(collection) {
        feature = svg.selectAll("path")
                .data(collection.features)
                .enter().append("svg:a")
                .attr("xlink:href", function(d) { return "/countries/" + d.properties.name.replace(/\s/g, "_"); })
                .attr("xlink:data-remote", true)
                .append("svg:path")
                .attr("d", clip);

//        feature = svg.selectAll("path")
//                .data(collection.features)
//                .enter().append("svg:path")
//                .attr("d", clip);
//        feature.insert("svg:a").attr("xlink:href", "http://nytimes.com")

        feature.append("svg:title")
                .text(function(d) { return d.properties.name; });

//        feature.append("svg:p")
//                .text(function(d) { return "hello"; });

        feature.append("svg:a")
                .attr("xlink:href", function(d) { return "/countries/" + d.properties.name.replace(/\s/g, "_"); })
                .attr("xlink:data-remote", true);
    });

              svg.append("circle")
                 .attr("cx",320)
                 .attr("cy",200)
                 .attr("r",190);

    d3.select(window)
            .on("mousemove", mousemove)
            .on("mouseup", mouseup);

    d3.select("select").on("change", function() {
        projection.mode(this.value).scale(scale[this.value]);
        refresh(750);
    });

    var m0,
            o0;

    function mousedown() {
        m0 = [d3.event.pageX, d3.event.pageY];
        o0 = projection.origin();
        d3.event.preventDefault();
    }

    function mousemove() {
        if (m0) {
            var m1 = [d3.event.pageX, d3.event.pageY],
                    o1 = [o0[0] + (m0[0] - m1[0]) / 8, o0[1] + (m1[1] - m0[1]) / 8];
            projection.origin(o1);
            circle.origin(o1)
            refresh();
        }
    }

    function mouseup() {
        if (m0) {
            mousemove();
            m0 = null;
        }
    }

    function refresh(duration) {
        (duration ? feature.transition().duration(duration) : feature).attr("d", clip);
    }

    function clip(d) {
        return path(circle.clip(d));
    }

</script>
</body>
</html>